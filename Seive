Sieve

const int N = 1e6+ 10;
vector<bool> Prime(N, 1);
void Seive()
{
    Prime[0] = Prime[1] = false;
    for (int i = 2; i < N; i++)
    {
        if (Prime[i])
        for (int j = 2 * i; j < N; j += i)
        Prime[j] = 0;          
    }
   // Time Complexity: O(n*log(log(n)))
  
}


bool prime[n + 1];
memset(prime, true, sizeof(prime));
  
for (int p = 2; p * p <= n; p++) {
    // If prime[p] is not changed, then it is a prime
    if (prime[p] == true) {
        // Update all multiples of p greater than or
        // equal to the square of it numbers which are
        // multiple of p and are less than p^2 are
        // already been marked.
        for (int i = p * p; i <= n; i += p)
            prime[i] = false;
    }
}
